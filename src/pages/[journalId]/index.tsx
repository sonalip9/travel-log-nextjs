import Head from 'next/head';

import { Button } from '@components/Button';
import { Container } from '@components/Container';
import { Text } from '@components/Text';
import { useLoginRedirect, usePages } from '@hooks';
import { AddCircleOutline } from '@icons';
import { NavBar } from '@templates/NavBar';
import { Pages } from '@templates/Pages';
import { EditPageModal } from '@templates/Pages';

export default function PagePages() {
  const { data } = useLoginRedirect();

  const {
    closeHandler,
    journalDetails,
    modalProps,
    onDeletePage,
    handler,
    pageLoading,
    visible,
    pages,
  } = usePages();

  if (!data || pageLoading) return null;

  return (
    <>
      <Head>
        <title>Your Travel Pages</title>
        <meta content="Generated by create next app" name="description" />
        <meta content="width=device-width, initial-scale=1" name="viewport" />
        <link href="/favicon.ico" rel="icon" />
      </Head>
      <main>
        <Container
          flex
          fluid
          css={{ height: '100vh', bg: '$background', gap: '$xl' }}
          responsive={false}
        >
          <Container css={{ gap: '$sm', p: '$xxl', pb: '$none' }} responsive={false}>
            <Container
              flex
              fluid
              row
              alignItems="flex-start"
              css={{ mb: '$xl' }}
              responsive={false}
            >
              <Text type="displayLarge">{journalDetails?.title}</Text>
              <Container css={{ flex: 1 }} />
              <NavBar />
            </Container>
            <Text type="headlineSmall">{journalDetails?.description}</Text>
          </Container>

          <Container
            alignCenter
            flex
            fluid
            row
            css={{
              flex: 1,
              gap: '$xl',
              overflowX: 'auto',
              overflowY: 'none',
              p: '$xxl',
              pt: '$none',
            }}
            responsive={false}
          >
            {pages?.map((page) => (
              <Pages
                key={page.pageId}
                page={page}
                onDelete={() => onDeletePage(page.pageId)}
                onUpdate={() => handler(false, page)}
              />
            ))}
          </Container>
          <Button
            auto
            color="primary"
            css={{ position: 'fixed', bottom: '$xl', right: '$xl', fontWeight: '600' }}
            icon={<AddCircleOutline />}
            size="lg"
            onPress={() => handler(true)}
          >
            Page
          </Button>
          {modalProps && (
            <EditPageModal visible={visible} onCancel={closeHandler} {...modalProps} />
          )}
        </Container>
      </main>
    </>
  );
}
